"""
MIT License

Copyright (c) 2022 A ô…™s ú…¥·¥è…™ 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import html
from typing import Optional

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
    TelegramError,
    Update,
)
from telegram.error import BadRequest
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, Filters
from telegram.utils.helpers import mention_html

from Exon import (
    DEMONS,
    DEV_USERS,
    DRAGONS,
    LOGGER,
    OWNER_ID,
    TIGERS,
    WOLVES,
    dispatcher,
)
from Exon.modules.disable import DisableAbleCommandHandler
from Exon.modules.helper_funcs.chat_status import (
    bot_admin,
    can_delete,
    can_restrict,
    connection_status,
    dev_plus,
    is_user_admin,
    is_user_ban_protected,
    is_user_in_chat,
    user_admin,
    user_admin_no_reply,
    user_can_ban,
)
from Exon.modules.helper_funcs.extraction import extract_user_and_text
from Exon.modules.helper_funcs.filters import CustomFilters
from Exon.modules.helper_funcs.string_handling import extract_time
from Exon.modules.log_channel import gloggable, loggable


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def ban(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot = context.bot
    args = context.args
    reason = ""
    if message.reply_to_message and message.reply_to_message.sender_chat:
        if r := bot.ban_chat_sender_chat(
            chat_id=chat.id,
            sender_chat_id=message.reply_to_message.sender_chat.id,
        ):
            message.reply_text(
                f"·¥Ñ ú·¥Ä…¥…¥·¥á ü {html.escape(message.reply_to_message.sender_chat.title)}  ô·¥á Ä ú·¥Äs…™ ü  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ö·¥Ä Ä…™ {html.escape(chat.title)}",
                parse_mode="html",
            )

        else:
            message.reply_text("…¢·¥Ä…¢·¥Ä ü  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        return
    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text("‚ö†Ô∏è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥.")
        return log_message
    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            raise
        message.reply_text("s·¥á·¥ò·¥á Ä·¥õ…™…¥ è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö·¥Ä·¥ò·¥Ä·¥õ ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥è Ä·¥Ä…¥…¢ …™…¥…™.")
        return log_message
    if user_id == bot.id:
        message.reply_text("·¥è ú  è·¥Ä,  ô·¥Ä…¥ s·¥á…¥·¥Ö…™ Ä…™, …¥·¥è·¥è ô ·¥ã·¥Ä·¥ç·¥ú!")
        return log_message
    if is_user_ban_protected(chat, user_id, member) and user not in DEV_USERS:
        if user_id == OWNER_ID:
            message.reply_text("·¥ç·¥á…¥·¥Ñ·¥è ô·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ s·¥Ä è·¥Ä ·¥ç·¥á ü·¥Ä·¥°·¥Ä…¥ ·¥õ·¥ú·¥Ä…¥ s·¥Ä è·¥Ä  ú·¥Ä ú?")
        elif user_id in DEV_USERS:
            message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä  ô·¥á Ä·¥õ…™…¥·¥Ö·¥Ä·¥ã ·¥ç·¥á ü·¥Ä·¥°·¥Ä…¥ ·¥ã·¥á ü·¥ú·¥Ä Ä…¢·¥Ä ·¥ã·¥Ä·¥ç…™.")
        elif user_id in DRAGONS:
            message.reply_text(
                "·¥ç·¥á ü·¥Ä·¥°·¥Ä…¥ s·¥Ä ú·¥Ä ô·¥Ä·¥õ ·¥ã…™·¥õ·¥Ä ·¥Ö…™ s…™…¥…™ ·¥Ä·¥ã·¥Ä…¥ ·¥ç·¥á·¥ç ô·¥Ä ú·¥Ä è·¥Ä·¥ã·¥Ä…¥ …¥ è·¥Ä·¥°·¥Ä ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä."
            )
        elif user_id in DEMONS:
            message.reply_text("·¥ç·¥á·¥ç ô·¥Ä·¥°·¥Ä ·¥ò·¥ás·¥Ä…¥·¥Ä…¥ ·¥Ö·¥Ä Ä…™ ·¥õ·¥ú·¥Ä…¥·¥ã·¥ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á ü·¥Ä·¥°·¥Ä…¥ ·¥õ·¥á·¥ç·¥Ä…¥-·¥õ·¥á·¥ç·¥Ä…¥ ·¥ã…™·¥õ·¥Ä.")
        elif user_id in TIGERS:
            message.reply_text("·¥ç·¥á·¥ç ô·¥Ä·¥°·¥Ä ·¥ò·¥ás·¥Ä…¥·¥Ä…¥ ·¥Ö·¥Ä Ä…™ ·¥õ·¥ú·¥Ä…¥·¥ã·¥ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á ü·¥Ä·¥°·¥Ä…¥ ·¥õ·¥á·¥ç·¥Ä…¥-·¥õ·¥á·¥ç·¥Ä…¥ ·¥ã…™·¥õ·¥Ä")
        elif user_id in WOLVES:
            message.reply_text("·¥ç·¥á…¥ è·¥Ä ü·¥Ä·¥ã·¥Ä…¥ ·¥Ä·¥ãs·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ç·¥á Ä·¥á·¥ã·¥Ä ·¥ã·¥á ô·¥Ä ü!")
        else:
            message.reply_text("‚ö†Ô∏è ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥.")
        return log_message
    if message.text.startswith("/s"):
        silent = True
        if not can_delete(chat, context.bot.id):
            return ""
    else:
        silent = False
    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#{'S' if silent else ''} ô·¥Ä…¥…¥·¥á·¥Ö\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )
    if reason:
        log += f"<b>·¥Ä ü·¥Äs·¥Ä…¥:</b> {reason}"
    try:
        chat.ban_member(user_id)
        if silent:
            if message.reply_to_message:
                message.reply_to_message.delete()
            message.delete()
            return log
        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker
        reply = (
            f"<code>‚ùï</code><b>Ban Event</b>\n\n"
            f"<b>‚Ä¢ ·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}\n"
            f"<b>‚Ä¢ ·¥ús·¥á Ä ùô∏ùô≥:</b> <code>{member.user.id}</code>\n"
            f"<b>‚Ä¢  ô·¥Ä…¥…¥·¥á·¥Ö  ô è:</b> {mention_html(user.id, html.escape(user.first_name))}"
        )
        if reason:
            reply += f"\n<b>‚Ä¢ ·¥Ä ü·¥Äs·¥Ä…¥:</b> {html.escape(reason)}"
        bot.sendMessage(
            chat.id,
            reply,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥ú…¥ ô·¥Ä…¥ ‚ùó", callback_data=f"unbanb_unban={user_id}"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ö·¥á ü·¥á·¥õ·¥á ‚ùó", callback_data="unbanb_del"
                        ),
                    ]
                ]
            ),
            parse_mode=ParseMode.HTML,
        )
        return log
    except BadRequest as excp:
        if excp.message == " ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            # Do not reply
            if silent:
                return log
            message.reply_text(" ô·¥Ä…¥…¥·¥á·¥Ö ‚ùó!", quote=False)
            return log
        else:
            LOGGER.warning(update)
            LOGGER.exception(
                "·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  ô·¥Ä…¥…¥…™…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä %s ·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥ú·¥ò %s (%s) ·¥ã·¥Ä Ä·¥á…¥·¥Ä %s",
                user_id,
                chat.title,
                chat.id,
                excp.message,
            )
            message.reply_text("·¥ú ú·¥ç...…™…¥…™ ·¥õ…™·¥Ö·¥Ä·¥ã  ô·¥á·¥ã·¥á Ä·¥ä·¥Ä...")
    return log_message


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def temp_ban(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot, args = context.bot, context.args
    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text("‚ö†Ô∏è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥.")
        return log_message
    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            raise
        message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™.")
        return log_message
    if user_id == bot.id:
        message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥ã·¥Ä…¥  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ö…™ Ä…™ s·¥á…¥·¥Ö…™ Ä…™, ·¥Ä·¥ò·¥Ä·¥ã·¥Ä ú ·¥ã·¥Ä·¥ç·¥ú …¥·¥è·¥è ô ?")
        return log_message
    if is_user_ban_protected(chat, user_id, member):
        message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥ç·¥á Ä·¥Äs·¥Ä ·¥ç·¥á…¥ è·¥ú·¥ã·¥Ä…™ …™…¥…™.")
        return log_message
    if not reason:
        message.reply_text("·¥Ä…¥·¥Ö·¥Ä  ô·¥á ü·¥ú·¥ç ·¥ç·¥á…¥·¥á…¥·¥õ·¥ú·¥ã·¥Ä…¥ ·¥°·¥Ä·¥ã·¥õ·¥ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ñ·¥á·¥ã·¥Ä ü ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™!")
        return log_message
    split_reason = reason.split(None, 1)
    time_val = split_reason[0].lower()
    reason = split_reason[1] if len(split_reason) > 1 else ""
    bantime = extract_time(message, time_val)
    if not bantime:
        return log_message
    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        "#·¥õ·¥á·¥ç·¥ò  ô·¥Ä…¥…¥·¥á·¥Ö\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}\n"
        f"<b>·¥õ…™·¥ç·¥á:</b> {time_val}"
    )
    if reason:
        log += f"\n Ä·¥á·¥Äs·¥è…¥: {reason}"
    try:
        chat.ban_member(user_id, until_date=bantime)
        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker
        reply_msg = (
            f"<code>‚ùï</code><b>Temporarily Banned</b>\n\n"
            f"<b>‚Ä¢ ·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}\n"
            f"<b>‚Ä¢ ·¥ús·¥á Ä …™·¥Ö:</b> <code>{member.user.id}</code>\n"
            f"<b>‚Ä¢  ô·¥Ä…¥…¥·¥á·¥Ö “ì·¥è Ä:</b> {time_val}\n"
            f"<b>‚Ä¢  ô·¥Ä…¥…¥·¥á·¥Ö  ô è:</b> {mention_html(user.id, html.escape(user.first_name))}"
        )
        if reason:
            reply_msg += f"\n<b>‚Ä¢  Ä·¥á·¥Äs·¥è…¥:</b> {html.escape(reason)}"
        bot.sendMessage(
            chat.id,
            reply_msg,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥ú…¥ ô·¥Ä…¥ ‚ùó", callback_data=f"unbanb_unban={user_id}"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ö·¥á ü·¥á·¥õ·¥á ‚ùó", callback_data="unbanb_del"
                        ),
                    ]
                ]
            ),
            parse_mode=ParseMode.HTML,
        )
        return log
    except BadRequest as excp:
        if excp.message == " ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            # Do not reply
            message.reply_text(
                f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>]  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ú…¥·¥õ·¥ú·¥ã {time_val}.",
                quote=False,
            )
            return log
        else:
            LOGGER.warning(update)
            LOGGER.exception(
                "·¥ã·¥ás·¥Ä ü·¥Ä ú·¥Ä…¥  ô·¥Ä…¥…¥…™…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä %s ·¥Ö·¥Ä ü·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò %s (%s) ·¥ã·¥Ä Ä·¥á…¥·¥Ä %s",
                user_id,
                chat.title,
                chat.id,
                excp.message,
            )
            message.reply_text("s…™·¥Ä ü·¥Ä…¥, s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä  ô·¥Ä…¥ ·¥ò·¥á…¥…¢·¥ú…¥·¥Ä …™…¥…™.")
    return log_message


@connection_status
@bot_admin
@can_restrict
@user_admin_no_reply
@user_can_ban
@loggable
def unbanb_btn(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    query = update.callback_query
    chat = update.effective_chat
    user = update.effective_user
    if query.data != "unbanb_del":
        splitter = query.data.split("=")
        query_match = splitter[0]
        if query_match == "unbanb_unban":
            user_id = splitter[1]
            if not is_user_admin(chat, int(user.id)):
                bot.answer_callback_query(
                    query.id,
                    text="‚ö†Ô∏è ·¥Ä…¥·¥Ö·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥ç·¥á·¥ç…™ ü…™·¥ã…™ ·¥Ñ·¥ú·¥ã·¥ú·¥ò  ú·¥Ä·¥ã ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú…¥ è…™·¥ã·¥Ä…¥ s·¥ú·¥Ä Ä·¥Ä ·¥è Ä·¥Ä…¥…¢",
                    show_alert=True,
                )
                return ""
            try:
                member = chat.get_member(user_id)
            except BadRequest:
                pass
            chat.unban_member(user_id)
            query.message.edit_text(
                f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] ·¥Ö…™ ô·¥á ô·¥Äs·¥ã·¥Ä…¥ ·¥è ü·¥á ú {mention_html(user.id, html.escape(user.first_name))}",
                parse_mode=ParseMode.HTML,
            )
            bot.answer_callback_query(query.id, text="Unbanned!")
            return (
                f"<b>{html.escape(chat.title)}:</b>\n"
                f"#·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö\n"
                f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, user.first_name)}\n"
                f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, member.user.first_name)}"
            )
    else:
        if not is_user_admin(chat, int(user.id)):
            bot.answer_callback_query(
                query.id,
                text="‚ö†Ô∏è ·¥Ä…¥·¥Ö·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥ç·¥á·¥ç…™ ü…™·¥ã…™ ·¥Ñ·¥ú·¥ã·¥ú·¥ò  ú·¥Ä·¥ã ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥ò·¥ás·¥Ä…¥.",
                show_alert=True,
            )
            return ""
        query.message.delete()
        bot.answer_callback_query(query.id, text="·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús !")
        return ""


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def punch(update: Update, context: CallbackContext) -> str:
    chat = update.effective_chat
    user = update.effective_user
    message = update.effective_message
    log_message = ""
    bot, args = context.bot, context.args
    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text("‚ö†Ô∏è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥")
        return log_message
    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            raise
        message.reply_text("‚ö†Ô∏è s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™.")
        return log_message
    if user_id == bot.id:
        message.reply_text(" è·¥á·¥Ä ú ú ú s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥ã·¥Ä…¥ ·¥ç·¥á ü·¥Ä·¥ã·¥ú·¥ã·¥Ä…¥ …™·¥õ·¥ú.")
        return log_message
    if is_user_ban_protected(chat, user_id):
        message.reply_text("s·¥Ä è·¥Ä  ô·¥á…¥·¥Ä Ä- ô·¥á…¥·¥Ä Ä  ô·¥á Ä ú·¥Ä Ä·¥Ä·¥ò s·¥Ä è·¥Ä  ô…™s·¥Ä ·¥ç·¥á·¥ç·¥ú·¥ã·¥ú ü ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™....")
        return log_message
    if res := chat.unban_member(user_id):
        # bot.send_sticker(chat.id, BAN_STICKER)  # banhammer marie sticker
        bot.sendMessage(
            chat.id,
            f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] ·¥Ö…™·¥õ·¥á…¥·¥Ö·¥Ä…¥…¢ ·¥è ü·¥á ú {mention_html(user.id, html.escape(user.first_name))}",
            parse_mode=ParseMode.HTML,
        )
        log = (
            f"<b>{html.escape(chat.title)}:</b>\n"
            f"#·¥ã…™·¥Ñ·¥ã·¥á·¥Ö\n"
            f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
            f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
        )
        if reason:
            log += f"\n<b> Ä·¥á·¥Äs·¥è…¥:</b> {reason}"
        return log
    else:
        message.reply_text("‚ö†Ô∏è s…™·¥Ä ü·¥Ä…¥, s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á·¥ú·¥ã·¥ú ü ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™.")
    return log_message


@bot_admin
@can_restrict
def punchme(update: Update, context: CallbackContext):
    user_id = update.effective_message.from_user.id
    if is_user_admin(update.effective_chat, user_id):
        update.effective_message.reply_text("·¥Ä·¥ã·¥ú  ô·¥á Ä ú·¥Ä Ä·¥Ä·¥ò ·¥Ä·¥ã·¥ú  ô…™s·¥Ä... ·¥õ·¥Ä·¥ò…™ ·¥ã·¥Ä·¥ç·¥ú ·¥Ä·¥Ö·¥ç…™…¥.")
        return
    if res := update.effective_chat.unban_member(user_id):
        update.effective_message.reply_text(
            "·¥ç·¥á·¥ç·¥ú·¥ã·¥ú ü ·¥ã·¥Ä·¥ç·¥ú ·¥ã·¥á ü·¥ú·¥Ä Ä …¢ Ä·¥ú·¥ò !!",
        )
    else:
        update.effective_message.reply_text(" ú·¥ú ú? ·¥Ä·¥ã·¥ú ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä :/")


@connection_status
@bot_admin
@can_restrict
@user_admin
@user_can_ban
@loggable
def unban(update: Update, context: CallbackContext) -> Optional[str]:
    message = update.effective_message
    user = update.effective_user
    chat = update.effective_chat
    log_message = ""
    bot, args = context.bot, context.args
    if message.reply_to_message and message.reply_to_message.sender_chat:
        if r := bot.unban_chat_sender_chat(
            chat_id=chat.id,
            sender_chat_id=message.reply_to_message.sender_chat.id,
        ):
            message.reply_text(
                f"·¥Ñ ú·¥Ä…¥…¥·¥á ü {html.escape(message.reply_to_message.sender_chat.title)}  ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á·¥ç ô·¥á ô·¥Äs·¥ã·¥Ä…¥ ·¥Ö·¥Ä Ä…™ {html.escape(chat.title)}",
                parse_mode="html",
            )

        else:
            message.reply_text("…¢·¥Ä…¢·¥Ä ü ·¥ú…¥·¥õ·¥ú·¥ã  ô·¥Ä…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        return
    user_id, reason = extract_user_and_text(message, args)
    if not user_id:
        message.reply_text("‚ö†Ô∏è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥.")
        return log_message
    try:
        member = chat.get_member(user_id)
    except BadRequest as excp:
        if excp.message != "·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            raise
        message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™.")
        return log_message
    if user_id == bot.id:
        message.reply_text(" ô·¥Ä…¢·¥Ä…™·¥ç·¥Ä…¥·¥Ä s·¥Ä è·¥Ä ·¥Ä·¥ã·¥Ä…¥ ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥  ü·¥Ä Ä·¥Ä…¥…¢·¥Ä…¥ s·¥Ä è·¥Ä ·¥ä…™·¥ã·¥Ä s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä ·¥Ö…™ s…™…¥…™...?")
        return log_message
    if is_user_in_chat(chat, user_id):
        message.reply_text("‚ö†Ô∏è ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥.")
        return log_message
    chat.unban_member(user_id)
    message.reply_text(
        f"{mention_html(member.user.id, html.escape(member.user.first_name))} [<code>{member.user.id}</code>] ·¥õ·¥á ü·¥Ä ú ·¥Ö…™ ô·¥á ô·¥Äs·¥ã·¥Ä…¥ ·¥è ü·¥á ú {mention_html(user.id, user.first_name)}",
        parse_mode=ParseMode.HTML,
    )
    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö\n"
        f"<b>·¥Ä·¥Ö·¥ç…™…¥:</b> {mention_html(user.id, html.escape(user.first_name))}\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )
    if reason:
        log += f"\n<b>·¥Ä ü·¥Äs·¥Ä…¥:</b> {reason}"
    return log


@connection_status
@bot_admin
@can_restrict
@gloggable
def selfunban(update: Update, context: CallbackContext) -> str:
    message = update.effective_message
    user = update.effective_user
    bot, args = context.bot, context.args
    if user.id not in DRAGONS or user.id not in TIGERS:
        return
    try:
        chat_id = int(args[0])
    except:
        message.reply_text(" ô·¥á Ä…™·¥ã·¥Ä…¥ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö  è·¥Ä…¥…¢  ô·¥á…¥·¥Ä Ä.")
        return
    chat = bot.getChat(chat_id)
    try:
        member = chat.get_member(user.id)
    except BadRequest as excp:
        if excp.message == "·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ö…™·¥õ·¥á·¥ç·¥ú·¥ã·¥Ä…¥":
            message.reply_text("s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥·¥á·¥ç·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä …™…¥…™.")
            return
        else:
            raise
    if is_user_in_chat(chat, user.id):
        message.reply_text(" ô·¥ú·¥ã·¥Ä…¥ ·¥ã·¥Ä·¥ú s·¥ú·¥Ö·¥Ä ú  ô·¥á Ä·¥Ä·¥Ö·¥Ä ·¥Ö…™…¢ Ä·¥ú·¥ò …™…¥…™??")
        return
    chat.unban_member(user.id)
    message.reply_text(f" è·¥á·¥ò, s·¥Ä è·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò·¥á·¥ç ô ü·¥è·¥ã…™ Ä·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä.")
    log = (
        f"<b>{html.escape(chat.title)}:</b>\n"
        f"#·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö\n"
        f"<b>·¥ús·¥á Ä:</b> {mention_html(member.user.id, html.escape(member.user.first_name))}"
    )
    return log


@bot_admin
@can_restrict
@loggable
def banme(update: Update, context: CallbackContext):
    user_id = update.effective_message.from_user.id
    chat = update.effective_chat
    user = update.effective_user
    if is_user_admin(update.effective_chat, user_id):
        update.effective_message.reply_text("‚ö†Ô∏è s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä  ô·¥Ä…¥…¥·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥.")
        return
    if res := update.effective_chat.ban_member(user_id):
        update.effective_message.reply_text(" è·¥ás, ·¥ã·¥Ä·¥ç·¥ú  ô·¥á…¥·¥Ä Ä!")
        return f"<b>{html.escape(chat.title)}:</b>\n# ô·¥Ä…¥·¥ç·¥á\n<b>·¥ús·¥á Ä:</b> {mention_html(user.id, user.first_name)}\n<b>…™·¥Ö:</b> <code>{user_id}</code>"

    else:
        update.effective_message.reply_text("Huh? s·¥Ä è·¥Ä ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä :/")


@dev_plus
def abishnoi(update: Update, context: CallbackContext):
    args = context.args
    bot = context.bot
    try:
        chat_id = str(args[0])
        del args[0]
    except TypeError:
        update.effective_message.reply_text("·¥õ·¥è ü·¥è…¥…¢  ô·¥á Ä…™ s·¥Ä è·¥Ä ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥Ö…™…¢·¥Ä·¥ú…¥…¢·¥ã·¥Ä…¥!")
    to_send = " ".join(args)
    if len(to_send) >= 2:
        try:
            bot.sendMessage(int(chat_id), to_send)
        except TelegramError:
            LOGGER.warning("·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ã…™ Ä…™·¥ç ·¥ã·¥á …¢ Ä·¥ú·¥ò %s", chat_id)
            update.effective_message.reply_text(
                "·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥. ·¥ç·¥ú…¥…¢·¥ã…™…¥ s·¥Ä è·¥Ä  ô·¥ú·¥ã·¥Ä…¥  ô·¥Ä…¢…™·¥Ä…¥ ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò …™·¥õ·¥ú?"
            )


__help__ = """
*·¥ús·¥á Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:*

‚Ä¢ /kickme*:* `·¥ç·¥á…¥·¥á…¥·¥Ö·¥Ä…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  è·¥Ä…¥…¢ ·¥ç·¥á…¥…¢·¥á ü·¥ú·¥Ä Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú `

‚Ä¢ /banme*:* `·¥ç·¥á·¥ç- ô·¥Ä…¥…¥·¥á·¥Ö ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä  è·¥Ä…¥…¢ ·¥ç·¥á…¥…¢·¥á ü·¥ú·¥Ä Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú `

*·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è:*

‚Ä¢ /ban <userhandle>*:*`  ô·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ) `
)
‚Ä¢ /sban <·¥ús·¥á Ä ú·¥Ä…¥·¥Ö ü·¥á>*:* `·¥Ö…™·¥Ä·¥ç-·¥Ö…™·¥Ä·¥ç  ô·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä. ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú, ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ·¥Ö·¥Ä…¥ ·¥õ…™·¥Ö·¥Ä·¥ã ·¥ç·¥á·¥ç ô·¥Ä ü·¥Äs. ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ )`

‚Ä¢ /tban <·¥ús·¥á Ä ú·¥Ä…¥·¥Ö ü·¥á> x(m/h/d)*:* ` ô·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã x ·¥°·¥Ä·¥ã·¥õ·¥ú. ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ). ·¥ç = ·¥ç…™…¥·¥ú·¥õ·¥ás, h =  ú·¥è·¥ú Äs, d = ·¥Ö·¥Ä ès.`

‚Ä¢ /unban <userhandle>*:* `·¥ç·¥á·¥ç ô·¥á ô·¥Äs·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä. ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ )`

‚Ä¢ /kick <userhandle>*:* `·¥ç·¥á…¥·¥á…¥·¥Ö·¥Ä…¥…¢ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä, ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ )`

‚Ä¢ /mute <userhandle>*:* `·¥ç·¥á·¥ç ô…™s·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä. ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ )`

‚Ä¢ /tmute <userhandle> x(m/h/d)*:* `·¥ç·¥á·¥ç ô…™s·¥ú·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä ·¥ú…¥·¥õ·¥ú·¥ã x ·¥°·¥Ä·¥ã·¥õ·¥ú. ( ·¥Ö·¥Ä Ä…™ ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú ·¥Ä·¥õ·¥Ä·¥ú  ô·¥Ä ü·¥Äs·¥Ä…¥ ·¥ò·¥ás·¥Ä…¥ ). ·¥ç = ·¥ç…™…¥·¥ú·¥õ·¥ás, h =  ú·¥è·¥ú Äs, d = ·¥Ö·¥Ä ès `
.
‚Ä¢ /unmute <userhandle>*:* `·¥ç·¥á·¥ç ô·¥ú…¥ è…™·¥ã·¥Ä…¥ ·¥ò·¥á…¥…¢…¢·¥ú…¥·¥Ä `
.
‚Ä¢ /zombies*:* `·¥ç·¥á…¥·¥Ñ·¥Ä Ä…™ ·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á Ä ú·¥Ä·¥ò·¥ús `

‚Ä¢ /zombies clean*:* `·¥ç·¥á·¥ç ô·¥ú·¥Ä…¥…¢ ·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á Ä ú·¥Ä·¥ò·¥ús `
.
‚Ä¢ /abishnoi <chatid> <·¥çs…¢>*:* ` ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ s·¥Ä è·¥Ä ·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ò·¥ás·¥Ä…¥ ·¥ã·¥á ·¥è ô Ä·¥è ü·¥Ä…¥ ·¥õ·¥á Ä·¥õ·¥á…¥·¥õ·¥ú `.
"""

__mod_name__ = "ùô±·¥Ä…¥s"

BAN_HANDLER = CommandHandler(["ban", "sban"], ban, run_async=True)
TEMPBAN_HANDLER = CommandHandler(["tban"], temp_ban, run_async=True)
KICK_HANDLER = CommandHandler(["kick", "punch"], punch, run_async=True)
UNBAN_HANDLER = CommandHandler("unban", unban, run_async=True)
##ROAR_HANDLER = CommandHandler("roar", selfunban, run_async=True)
UNBAN_BUTTON_HANDLER = CallbackQueryHandler(unbanb_btn, pattern=r"unbanb_")
KICKME_HANDLER = DisableAbleCommandHandler(
    ["kickme", "punchme"], punchme, filters=Filters.chat_type.groups, run_async=True
)
ABISHNOI_HANDLER = CommandHandler(
    "abishnoi",
    abishnoi,
    pass_args=True,
    filters=CustomFilters.sudo_filter,
    run_async=True,
)
BANME_HANDLER = CommandHandler("banme", banme, run_async=True)

dispatcher.add_handler(BAN_HANDLER)
dispatcher.add_handler(TEMPBAN_HANDLER)
dispatcher.add_handler(KICK_HANDLER)
dispatcher.add_handler(UNBAN_HANDLER)
# dispatcher.add_handler(ROAR_HANDLER)
dispatcher.add_handler(KICKME_HANDLER)
dispatcher.add_handler(UNBAN_BUTTON_HANDLER)
dispatcher.add_handler(ABISHNOI_HANDLER)
dispatcher.add_handler(BANME_HANDLER)

__handlers__ = [
    BAN_HANDLER,
    TEMPBAN_HANDLER,
    KICK_HANDLER,
    UNBAN_HANDLER,
    # ROAR_HANDLER,
    KICKME_HANDLER,
    UNBAN_BUTTON_HANDLER,
    ABISHNOI_HANDLER,
    BANME_HANDLER,
]
